/*
Created By: Mikael Aringberg
Date: 15/09-2023
Purpose: To analyze the COVID pandemic by grouping and segmenting different data.
*/

-- CovidDeaths Table



SELECT

	*

FROM

	CovidDeaths





-- Selecting Data that I will be using



SELECT

	location,

	date,

	total_cases,

	new_cases,

	total_deaths,

	population

FROM

	CovidDeaths d

WHERE

	continent IS NOT NULL

ORDER BY

	1, 2

	

-- Looking at Total Cases vs Total Deaths

-- Shows the likelihood of dying if you contract COVID in your (or others) country



SELECT

	location,

	date,

	total_cases,

	total_deaths,

	(total_deaths/total_cases)*100 AS [DeathPercentage]

FROM

	CovidDeaths d

WHERE

	location = 'Sweden' -- Can be filtered to your desired location

ORDER BY

	1, 2



-- Looking at Total Cases vs population

-- Shows what percentage of population got COVID



SELECT

	location,

	date,

	population,

	total_cases,

	(total_cases/population)*100 AS [PercentPopulationInfected]

FROM

	CovidDeaths d

WHERE

	location = 'Sweden' -- Can be filtered to your desired location

ORDER BY

	1, 2

	

-- Looking at Countries with the Highest Infection rates compared to population





SELECT

	location,

	population,

	MAX(total_cases) AS [HighestInfectionCount],

	ROUND(MAX((total_cases * 100.0 / population)), 2) AS [PercentPopulationInfected] -- In this case I can use ROUND to limit the decimals without it affecting the information

FROM

	CovidDeaths d

WHERE

	continent IS NOT NULL

GROUP BY

	location,

	population

ORDER BY

	PercentPopulationInfected DESC

	

-- Showing Countries with the Highest Death Count by population



SELECT

	location,

	MAX(CAST(total_deaths AS INT)) AS [TotalDeathCount] -- Converting NVARCHAR to INTEGER

FROM

	CovidDeaths d

WHERE

	continent IS NOT NULL -- Eliminating the data that has NULL as Continent to avoid confusion

GROUP BY

	location

ORDER BY

	TotalDeathCount DESC

	



-- LET'S BREAK THINGS DOWN BY CONTINENT

-- Some data may be higher/lower than the specific total but the hierarchy is correct



-- Showing continents with the Highest Death Count



SELECT

	location,

	MAX(CAST(total_deaths AS INT)) AS [TotalDeathCount]

FROM

	CovidDeaths d

WHERE

	continent IS NULL

GROUP BY

	location

ORDER BY

	TotalDeathCount DESC

	



-- GLOBAL NUMBERS



SELECT

	date,

	SUM(new_cases) AS [total_cases],

	SUM(CAST(new_deaths AS INT)) AS [total_deaths],

	SUM(CAST(new_deaths AS INT))/(SUM(new_cases)*100) AS [DeathPercentage]

FROM

	CovidDeaths d

WHERE

	continent IS NOT NULL

GROUP BY

	date

ORDER BY

	1, 2





-- Looking at Total Population vs Vaccinations

	

-- CTE

WITH PopVsVac

	(continent,

	location,

	date,

	population,

	new_vaccinations,

	RollingPeopleVaccinated)

AS

(SELECT

	d.continent,

	d.location,

	d.date,

	d.population,

	v.new_vaccinations,

	SUM(CAST(v.new_vaccinations AS INT)) 

	OVER (PARTITION BY d.location ORDER BY d.location, d.date) AS [RollingPeopleVaccinated]

	-- (RollingPeopleVaccinated/population)*100

FROM

	CovidDeaths d

JOIN

	CovidVaccinations v

ON

	d.location = v.location

AND

	d.date = v.date

WHERE

	d.continent IS NOT NULL

--ORDER BY

	--2,3

)

SELECT

	*, (RollingPeopleVaccinated/population)*100

FROM

	PopVsVac



-- Creating View to store data for later visualizations



CREATE VIEW PercentPopulationVaccinated

AS

SELECT

	d.continent,

	d.location,

	d.date,

	d.population,

	v.new_vaccinations,

	SUM(CAST(v.new_vaccinations AS INT)) 

	OVER (PARTITION BY d.location ORDER BY d.location, d.date) AS [RollingPeopleVaccinated]

	-- (RollingPeopleVaccinated/population)*100

FROM

	CovidDeaths d

JOIN

	CovidVaccinations v

ON

	d.location = v.location

AND

	d.date = v.date

WHERE

	d.continent IS NOT NULL



</sql><current_tab id="0"/></tab_sql></sqlb_project>
